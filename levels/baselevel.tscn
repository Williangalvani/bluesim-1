[gd_scene load_steps=13 format=3 uid="uid://clbt7xl26oubb"]

[ext_resource type="Script" path="res://scripts/settings.gd" id="2"]
[ext_resource type="Script" path="res://menu/SubViewport.gd" id="2_fvsuw"]
[ext_resource type="Script" path="res://levels/camera/targetPos.gd" id="5"]
[ext_resource type="Script" path="res://levels/tether.gd" id="5_ka5gl"]
[ext_resource type="Script" path="res://levels/baselevel.gd" id="7"]
[ext_resource type="Material" uid="uid://cqgrgysdqshgm" path="res://scenery/shaders/underwater.tres" id="7_fte2l"]
[ext_resource type="PackedScene" uid="uid://d0rv01klybh31" path="res://vehicles/bluerovheavy/BlueRovHeavy.tscn" id="9"]
[ext_resource type="Material" uid="uid://bqefm2sjfvjij" path="res://vehicles/components/ping360render.tres" id="9_ru873"]
[ext_resource type="Script" path="res://vehicles/components/ping360/ping360display.gd" id="10_5kfrs"]

[sub_resource type="GDScript" id="1"]
script/source = "# Licensed under the MIT License.
# Copyright (c) 2018-2020 Jaccomo Lorenz (Maujoe)

extends Node3D

# User settings:
# General settings
@export var enabled = true : set = set_enabled

# See https://docs.godotengine.org/en/latest/classes/class_input.html?highlight=Input#enumerations
@export var mouse_mode = Input.MOUSE_MODE_CAPTURED # (int, \"Visible\", \"Hidden\", \"Captured, Confined\")

enum Freelook_Modes {MOUSE, INPUT_ACTION, MOUSE_AND_INPUT_ACTION}

# Freelook settings
@export var freelook = true
@export  var freelook_mode = 2
@export var sensitivity = 0.5
@export var smoothness = 0.5 : set = set_smoothness
@export var yaw_limit = 360
@export var pitch_limit = 360

# Pivot Settings
@export var privot: Node3D = null
@export var distance = 5.0 : set = set_distance
@export var rotate_privot = false
@export var collisions = true : set = set_collisions

# Movement settings
@export var movement = true
@export var acceleration = 5.0
@export var deceleration = 0.1
@export var max_speed = Vector3(15.0, 15.0, 15.0)
@export var local = true

# Input Actions
@export var rotate_left_action = \"rotate_left\"
@export var rotate_right_action = \"rotate_right\"
@export var rotate_up_action = \"rotate_up\"
@export var rotate_down_action = \"rotate_down\"
@export var forward_action = \"player_up\"
@export var backward_action = \"player_down\"
@export var left_action = \"player_left\"
@export var right_action = \"player_right\"
@export var up_action = \"camera_upwards\"
@export var down_action = \"camera_downwards\"
@export var trigger_action = \"camera_trigger\"

# Gui settings
@export var use_gui = true
@export var gui_action = \"ui_cancel\"

# Intern variables.
var _mouse_offset = Vector2()
var _rotation_offset = Vector2()
var _yaw = 0.0
var _pitch = 0.0
var _total_yaw = 0.0
var _total_pitch = 0.0

var _direction = Vector3(0.0, 0.0, 0.0)
var _speed = Vector3(0.0, 0.0, 0.0)
var _gui

var _triggered=false

const ROTATION_MULTIPLIER = 500

func _ready():
	_check_actions([
		forward_action,
		backward_action,
		left_action,
		right_action,
		gui_action,
		up_action,
		down_action,
		rotate_left_action,
		rotate_right_action,
		rotate_up_action,
		rotate_down_action
	])

	#if privot:
	#	print(privot)
	#	privot = get_node(privot)
	#else:
	#	privot = null

	set_enabled(enabled)


func _input(event):
		if len(trigger_action)!=0:
			if event.is_action_pressed(trigger_action):
				_triggered=true
			elif event.is_action_released(trigger_action):
				_triggered=false
		else:
			_triggered=true
		if freelook and _triggered:
			if event is InputEventMouseMotion:
				_mouse_offset = event.relative
				
			_rotation_offset.x = Input.get_action_strength(rotate_right_action) - Input.get_action_strength(rotate_left_action)
			_rotation_offset.y = Input.get_action_strength(rotate_down_action) - Input.get_action_strength(rotate_up_action)
	
		if movement and _triggered:
			_direction.x = Input.get_action_strength(right_action) - Input.get_action_strength(left_action)
			_direction.y = Input.get_action_strength(up_action) - Input.get_action_strength(down_action)
			_direction.z = Input.get_action_strength(backward_action) - Input.get_action_strength(forward_action)

func _process(delta):
	if _triggered:
		_update_views(delta)

func _update_views(delta):
	if privot:
		_update_distance()
	if freelook:
		_update_rotation(delta)
	if movement:
		_update_movement(delta)

func _physics_process(delta):
	if _triggered:
		_update_views_physics(delta)

func _update_views_physics(delta):
	# Called when collision are enabled
	_update_distance()
	if freelook:
		_update_rotation(delta)

	var space_state = get_world_3d().get_direct_space_state()
	var obstacle = space_state.intersect_ray(PhysicsRayQueryParameters3D.create(privot.get_position(),  get_position()))
	if not obstacle.is_empty():
		set_position(obstacle.position)

func _update_movement(delta):
	var offset = max_speed * acceleration * _direction

	_speed.x = clamp(_speed.x + offset.x, -max_speed.x, max_speed.x)
	_speed.y = clamp(_speed.y + offset.y, -max_speed.y, max_speed.y)
	_speed.z = clamp(_speed.z + offset.z, -max_speed.z, max_speed.z)

	# Apply deceleration if no input
	if _direction.x == 0:
		_speed.x *= (1.0 - deceleration)
	if _direction.y == 0:
		_speed.y *= (1.0 - deceleration)
	if _direction.z == 0:
		_speed.z *= (1.0 - deceleration)

	if local:
		translate(_speed * delta)
	else:
		global_translate(_speed * delta)

func _update_rotation(delta):
	var offset = Vector2();
	
	if not freelook_mode == Freelook_Modes.INPUT_ACTION:
		offset += _mouse_offset * sensitivity
	if not freelook_mode == Freelook_Modes.MOUSE: 
		offset += _rotation_offset * sensitivity * ROTATION_MULTIPLIER * delta
	
	_mouse_offset = Vector2()

	_yaw = _yaw * smoothness + offset.x * (1.0 - smoothness)
	_pitch = _pitch * smoothness + offset.y * (1.0 - smoothness)

	if yaw_limit < 360:
		_yaw = clamp(_yaw, -yaw_limit - _total_yaw, yaw_limit - _total_yaw)
	if pitch_limit < 360:
		_pitch = clamp(_pitch, -pitch_limit - _total_pitch, pitch_limit - _total_pitch)

	_total_yaw += _yaw
	_total_pitch += _pitch

	if privot:
		var target = privot.get_position()
		var dist = get_position().distance_to(target)

		set_position(target)
		rotate_y(deg_to_rad(-_yaw))
		rotate_object_local(Vector3(1,0,0), deg_to_rad(-_pitch))
		translate(Vector3(0.0, 0.0, dist))

		if rotate_privot:
			privot.rotate_y(deg_to_rad(-_yaw))
	else:
		rotate_y(deg_to_rad(-_yaw))
		rotate_object_local(Vector3(1,0,0), deg_to_rad(-_pitch))

func _update_distance():
	var t = privot.get_position()
	t.z -= distance
	set_position(t)

func _update_process_func():
	# Use physics process if collision are enabled
	if collisions and privot:
		set_physics_process(true)
		set_process(false)
	else:
		set_physics_process(false)
		set_process(true)

func _check_actions(actions=[]):
	if OS.is_debug_build():
		for action in actions:
			if not InputMap.has_action(action):
				print('WARNING: No action \"' + action + '\"')

func set_privot(value):
	privot = value
	_update_process_func()
	if len(trigger_action)!=0:
		_update_views(0)

func set_collisions(value):
	collisions = value
	_update_process_func()

func set_enabled(value):
	enabled = value
	if enabled:
		Input.set_mouse_mode(mouse_mode)
		set_process_input(true)
		_update_process_func()
	else:
		set_process(false)
		set_process_input(false)
		set_physics_process(false)

func set_smoothness(value):
	smoothness = clamp(value, 0.001, 0.999)

func set_distance(value):
	distance = max(0, value)
"

[sub_resource type="PlaneMesh" id="PlaneMesh_qvnpa"]

[sub_resource type="GDScript" id="3"]
script/source = "extends PanelContainer


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass

func _input(event):
	if event.is_action_pressed(\"help\"):
		if not self.is_visible():
			self.show()
		else:
			self.hide()
"

[node name="Node2D" type="Control"]
process_mode = 3
show_behind_parent = true
layout_mode = 3
anchor_right = 1.109
anchor_bottom = 1.11
offset_left = -1.52588e-05
offset_top = -1.00136e-05
offset_right = -125.568
offset_bottom = -71.28
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("7")

[node name="ViewportCamera" type="SubViewportContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
stretch = true

[node name="SubViewport" type="SubViewport" parent="ViewportCamera"]
handle_input_locally = false
size = Vector2i(1152, 648)
render_target_update_mode = 4
script = ExtResource("2_fvsuw")

[node name="ViewportGlobal2" type="SubViewportContainer" parent="ViewportCamera/SubViewport"]
anchors_preset = 3
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -195.0
offset_top = -205.0
offset_right = 5.0
offset_bottom = -5.0
grow_horizontal = 0
grow_vertical = 0
size_flags_horizontal = 3
size_flags_vertical = 3
stretch = true

[node name="SubViewport" type="SubViewport" parent="ViewportCamera/SubViewport/ViewportGlobal2"]
transparent_bg = true
handle_input_locally = false
size = Vector2i(200, 200)
render_target_update_mode = 4

[node name="Control" type="ColorRect" parent="ViewportCamera/SubViewport/ViewportGlobal2/SubViewport"]
material = ExtResource("9_ru873")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("10_5kfrs")

[node name="playerCamera" type="Node3D" parent="ViewportCamera/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 14.7902, 0)
script = SubResource("1")
mouse_mode = 0
collisions = false

[node name="Camera3D" type="Camera3D" parent="ViewportCamera/SubViewport/playerCamera" groups=["cameras"]]
current = true
far = 275.0

[node name="cameraPosition" type="Node3D" parent="ViewportCamera/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4.21178, 10.2615, 4.21928)
script = ExtResource("5")

[node name="BlueRovHeavy" parent="ViewportCamera/SubViewport" instance=ExtResource("9")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4.33197, 0)

[node name="tether" type="Node3D" parent="ViewportCamera/SubViewport/BlueRovHeavy"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.53995, 0, 0)
script = ExtResource("5_ka5gl")
straight_loops = 50
coiled_loops = 0

[node name="water" type="MeshInstance3D" parent="ViewportCamera/SubViewport"]
transform = Transform3D(30, -2.62268e-06, -2.62268e-06, -2.62268e-06, -30, -1.04636e-14, -2.62268e-06, 2.39746e-13, -30, 0, 3.59871, 0)
material_override = ExtResource("7_fte2l")
cast_shadow = 0
mesh = SubResource("PlaneMesh_qvnpa")

[node name="SettingsPanel" type="PanelContainer" parent="ViewportCamera"]
layout_mode = 2
script = ExtResource("2")

[node name="VBoxContainer" type="VBoxContainer" parent="ViewportCamera/SettingsPanel"]
layout_mode = 2

[node name="godrayToggle" type="CheckButton" parent="ViewportCamera/SettingsPanel/VBoxContainer"]
visible = false
layout_mode = 2
text = "GodRays"

[node name="dirtparticlesToggle" type="CheckButton" parent="ViewportCamera/SettingsPanel/VBoxContainer"]
visible = false
layout_mode = 2
text = "Particles"

[node name="fancyWaterToggle" type="CheckButton" parent="ViewportCamera/SettingsPanel/VBoxContainer"]
visible = false
layout_mode = 2
text = "Fancy Water"

[node name="Ping360Toggle" type="CheckButton" parent="ViewportCamera/SettingsPanel/VBoxContainer"]
visible = false
layout_mode = 2
text = "Ping360"

[node name="StreamingToggle" type="CheckButton" parent="ViewportCamera/SettingsPanel/VBoxContainer"]
layout_mode = 2
button_pressed = true
text = "Stream UDP"

[node name="physicsRate" type="Label" parent="ViewportCamera/SettingsPanel/VBoxContainer"]
layout_mode = 2
text = "Physics (hz):"

[node name="physicsRateSlider" type="HSlider" parent="ViewportCamera/SettingsPanel/VBoxContainer"]
layout_mode = 2
min_value = 60.0
max_value = 500.0
value = 60.0

[node name="HelpPanel" type="PanelContainer" parent="ViewportCamera"]
process_mode = 3
visible = false
modulate = Color(1, 1, 1, 0.619608)
layout_mode = 2
script = SubResource("3")

[node name="VBoxContainer" type="VBoxContainer" parent="ViewportCamera/HelpPanel"]
layout_mode = 2

[node name="help" type="Label" parent="ViewportCamera/HelpPanel/VBoxContainer"]
layout_mode = 2
text = "H - Toggle Help (this)
ESC - Graphics settings

C - switch camera//vehicle
R - reset position

Free camera:
Hold left button + a/w/s/d + q/e

ROV:
1/2: Increase/decrease lights
3/4: Close/open gripper
5/6: Camera3D tilt down/up
Space: Rise
Shift: Dive
A/D: Strafe
Up/Down: forward/backwards
left/right: Yaw left/right
"

[node name="ViewportGlobal_SubViewport_Scene_OmniLight3D" type="OmniLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 8.82227, -0.900686, 47.1526)
light_energy = 0.8
light_indirect_energy = 0.7
omni_range = 5.9

[node name="ReferenceRect" type="ReferenceRect" parent="."]
visible = false
custom_minimum_size = Vector2(1024, 600)
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 1.36035
offset_top = 1.36038
offset_right = 1.36035
offset_bottom = 1.36035

[node name="UdpH264Streamer" type="UdpH264Streamer" parent="."]

[node name="SubViewport" type="SubViewport" parent="."]

[connection signal="toggled" from="ViewportCamera/SettingsPanel/VBoxContainer/StreamingToggle" to="." method="_on_streaming_toggle_toggled"]
[connection signal="value_changed" from="ViewportCamera/SettingsPanel/VBoxContainer/physicsRateSlider" to="ViewportCamera/SettingsPanel" method="_on_HSlider_value_changed"]
