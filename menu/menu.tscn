[gd_scene load_steps=7 format=3 uid="uid://m2r116uqfaff"]

[ext_resource type="Environment" path="res://menu/menuEnvironment.tres" id="2"]
[ext_resource type="PackedScene" uid="uid://u3a6ab83b0jv" path="res://blender_sources/bluerov2.blend" id="2_lqlur"]

[sub_resource type="GDScript" id="1"]
script/source = "extends Control

var downloaded_files = []

var pool_level = preload(\"res://levels/pool.tscn\")

class LevelLoader:
	var bin_path = OS.get_user_data_dir()

	func ensure_levels_folder_exists():
		var directory = DirAccess.open(bin_path)
		directory.make_dir(\"levels\")

	func list_available_external_levels():

		var dir = DirAccess.open(bin_path + \"/levels\")
		print(\"Looking for additional levels at %s\" % bin_path + \"/levels\")
		dir.list_dir_begin() # TODOGODOT4 fill missing arguments https://github.com/godotengine/godot/pull/40547
		var found = []
	
		# list .pck files
		while true:
			var file = dir.get_next()
			if file.is_empty():
				break
			elif not file.begins_with(\".\") and file.ends_with(\".pck\"):
				found.append(file)
		dir.list_dir_end()
		
		# validate .pck files
		# They must have a custom_level.tscn file
		var valid = {}
		for file in found:
			if not ProjectSettings.load_resource_pack(\"res://levels/\" + file):
				print(\"Failed to load file: \" + file)
			# Now one can use the assets as if they had them in the project from the start
			var imported_scene = load(\"res://custom_level.tscn\")
			if imported_scene == null:
				print(\"Unable to find 'custom_level.tscn' in file \" + file)
				continue
			var level_name = file
			valid[file] = level_name
		return valid

func add_status(text: String):
	$HBoxContainer/Menu/statusLabel.text += text + \"\\n\"

func set_version():
	var engine_version = Engine.get_version_info()
	$SubViewportContainer/versionLabel.text = \"Engine version: {major}.{minor}.{patch}-{hash} ({year}-{status})\".format(engine_version)

func download_file(url : String, file_name : String):
	add_status(\"downloading \" + file_name)
	var http = HTTPRequest.new()
	add_child(http)
	http.set_download_file(file_name)
	http.request(url)
	http.connect(\"request_completed\",Callable(self,\"_on_download_finished\").bind(file_name))

func _all_files_downloaded():
	if OS.get_name() == \"Windows\":
		return len(downloaded_files) == 4
	elif OS.get_name() == \"Linux\":
		return len(downloaded_files) == 1
		
func _on_download_finished(_result, _response_code, headers, body, file_name):
	add_status(\"done downloading \" + file_name)
	downloaded_files.append(file_name)
	if _all_files_downloaded():
		_start_sitl()

func _start_sitl():
	
	var output = []
	if OS.get_name() == \"Windows\":
		var binary = FileAccess.open(\"user://ardusub.exe\", FileAccess.READ)
		print(binary.get_path_absolute())
		Globals.sitl_pid = OS.execute(binary.get_path_absolute(), [\"-S\",\"--model\",\"JSON\",\"--speedup\",\"1\",\"-I0\",\"--home\",\"33.810313,-118.39386700000001,0.0,270.0\"], output)
		print(Globals.sitl_pid)
		add_status(\"SITL is running\")
		$HBoxContainer/Menu/Buttons.visible = true
		
	elif OS.get_name() == \"Linux\":
		var binary = FileAccess.open(\"user://ardusub\", FileAccess.READ)
		print(binary.get_path_absolute())
		print(OS.execute(\"chmod\", [\"+x\", binary.get_path_absolute()], output))
		Globals.sitl_pid = OS.execute(binary.get_path_absolute(), [\"-S\",\"--model\",\"JSON\",\"--speedup\",\"1\",\"-I0\",\"--home\",\"33.810313,-118.39386700000001,0.0,270.0\"], output)
		add_status(\"SITL is running\")
		$HBoxContainer/Menu/Buttons.visible = true

	elif OS.get_name() == \"macOS\":
		var binary = FileAccess.open(\"user://ardusub\", FileAccess.READ)
		print(binary.get_path_absolute())
		print(OS.execute(\"chmod\", [\"+x\", binary.get_path_absolute()], output))
		Globals.sitl_pid = OS.create_process(binary.get_path_absolute(), [\"-S\",\"--model\",\"JSON\",\"--speedup\",\"1\",\"-I0\",\"--home\",\"33.810313,-118.39386700000001,0.0,270.0\"])
		add_status(\"SITL is running\")
		$HBoxContainer/Menu/Buttons.visible = true

func _notification(what):
	if (what == Node.NOTIFICATION_WM_CLOSE_REQUEST):
		OS.kill(Globals.sitl_pid)
		get_tree().quit()

func create_level_buttons(levels):
	for filename in levels.keys():
		var button = Button.new()
		button.text = levels[filename]
		button.add_theme_font_override(\"font\", $HBoxContainer/Menu/Buttons/poolLevel.get_font(\"font\"))
		button.connect(\"pressed\",Callable(self,\"_on_customLevel_pressed\").bind(filename))
		$HBoxContainer/Menu/Buttons.add_child(button)

func find_external_levels():
	var loader = LevelLoader.new()
	loader.ensure_levels_folder_exists()
	var levels = loader.list_available_external_levels()
	self.create_level_buttons(levels)

func launch_sitl():
	if OS.get_name() == \"Windows\":
		if not FileAccess.file_exists(\"user://ardusub.exe\"):
			add_status(\"SITL binary not found, downloading...\")
			download_file(\"https://firmware.ardupilot.org/Tools/MissionPlanner/sitl/ArduSub.elf\", \"user://ardusub.exe\")
			download_file(\"https://firmware.ardupilot.org/Tools/MissionPlanner/sitl/cyggcc_s-1.dll\", \"user://cyggcc_s-1.dll\")
			download_file(\"https://firmware.ardupilot.org/Tools/MissionPlanner/sitl/cygstdc++-6.dll\", \"user://cygstdc++-6.dll\")
			download_file(\"https://firmware.ardupilot.org/Tools/MissionPlanner/sitl/cygwin1.dll\", \"user://cygwin1.dll\")
		else:
			_start_sitl()
	elif OS.get_name() == \"Linux\":
		if not FileAccess.file_exists(\"user://ardusub\"):
			download_file(\"https://firmware.ardupilot.org/Sub/latest/SITL_x86_64_linux_gnu/ardusub\", \"user://ardusub\")
		
		_start_sitl()
	elif OS.get_name() == \"macOS\":
		var user_data_path = OS.get_user_data_dir()
	
		# Print the absolute path
		print(\"Absolute path to user://: \", user_data_path)
		if not FileAccess.file_exists(\"user://ardusub\"):
			add_status(\"sitl not found\")
			add_status(\"add a sitl binary to \" + user_data_path)
			
		else:
			_start_sitl()
	else:
		$HBoxContainer/Menu/Buttons.visible = true
		$HBoxContainer/Menu/CheckBox.visible = false
		add_status(\"SITL not available for plataform: %s\" % OS.get_name())
# Called when the node enters the scene tree for the first time.
func _ready():
	print(\"starting\")
	print(OS.get_cmdline_args())
	set_version()
	get_tree().set_auto_accept_quit(false)
	find_external_levels()
	$HBoxContainer/Menu/Buttons.visible = false
	print(OS.get_name())
	var args = Array(OS.get_cmdline_args())
	if args.has(\"--no-sitl\"):
		print(\"skipping sitl launch\")
		$HBoxContainer/Menu/Buttons.visible = true
	else:
		self.launch_sitl()

func _on_poolLevel_pressed():
	Globals.active_vehicle = \"bluerovheavy\"
	Globals.active_level = \"res://levels/pool.tscn\"
	SceneLoader.goto_scene(\"res://levels/baselevel.tscn\")

func _on_CheckBox_toggled(button_pressed):
	Globals.wait_SITL = button_pressed

func _on_customLevel_pressed(filename):
	Globals.active_vehicle = \"bluerovheavy\"
	Globals.active_level = \"res://custom_level.tscn\"
	ProjectSettings.load_resource_pack(\"res://levels/\" + filename)
	SceneLoader.goto_scene(\"res://levels/baselevel.tscn\")



func _on_timer_timeout():
	var args = Array(OS.get_cmdline_args())
	if args.has(\"--pool\"):
		self._on_poolLevel_pressed()
"

[sub_resource type="Animation" id="2"]
length = 5.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 5),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(0, 0, 0), Vector3(0, -360, 0)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_fk1dg"]
_data = {
"rotatingbluerov": SubResource("2")
}

[sub_resource type="GDScript" id="3"]
script/source = "extends CheckBox

func _ready():
	visible = not Globals.isHTML5
"

[node name="Control" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_right = -768.0
offset_bottom = -432.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("1")

[node name="SubViewportContainer" type="SubViewportContainer" parent="."]
custom_minimum_size = Vector2(300, 300)
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
stretch = true

[node name="SubViewport" type="SubViewport" parent="SubViewportContainer"]
handle_input_locally = false
size = Vector2i(1152, 648)
render_target_update_mode = 4

[node name="Camera3D" type="Camera3D" parent="SubViewportContainer/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1.06004, 2.38419e-07, 2.77837)
environment = ExtResource("2")

[node name="SpotLight3D" type="SpotLight3D" parent="SubViewportContainer/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 0.941659, 0.336569, 0, -0.336569, 0.941659, 0.295804, 0.721521, 2.64046)
light_energy = 11.99

[node name="SpotLight2" type="SpotLight3D" parent="SubViewportContainer/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1.69466, 0.721521, 2.64046)
light_energy = 11.99

[node name="Node3D" type="Node3D" parent="SubViewportContainer/SubViewport"]

[node name="AnimationPlayer" type="AnimationPlayer" parent="SubViewportContainer/SubViewport/Node3D"]
libraries = {
"": SubResource("AnimationLibrary_fk1dg")
}
autoplay = "rotatingbluerov"

[node name="bluerov2" parent="SubViewportContainer/SubViewport/Node3D" instance=ExtResource("2_lqlur")]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0.0217752, 0, 0.0104795)

[node name="versionLabel" type="Label" parent="SubViewportContainer"]
layout_mode = 2

[node name="HBoxContainer" type="HBoxContainer" parent="."]
layout_mode = 0
offset_left = 100.0
offset_top = 211.0
offset_right = 485.0
offset_bottom = 317.0
grow_horizontal = 2
grow_vertical = 2
alignment = 1

[node name="Menu" type="VBoxContainer" parent="HBoxContainer"]
layout_mode = 2

[node name="Buttons" type="VBoxContainer" parent="HBoxContainer/Menu"]
layout_mode = 2

[node name="poolLevel" type="Button" parent="HBoxContainer/Menu/Buttons"]
layout_mode = 2
text = "Pool"

[node name="customLevel" type="Button" parent="HBoxContainer/Menu/Buttons"]
visible = false
layout_mode = 2
text = "Ship Level"

[node name="CheckBox" type="CheckBox" parent="HBoxContainer/Menu"]
layout_mode = 2
text = "Sync with SITL (only run frames when new input arrive)"
script = SubResource("3")

[node name="statusLabel" type="Label" parent="HBoxContainer/Menu"]
layout_mode = 2
text = "Starting...
"

[node name="Timer" type="Timer" parent="HBoxContainer/Menu"]
wait_time = 0.5
one_shot = true
autostart = true

[connection signal="pressed" from="HBoxContainer/Menu/Buttons/poolLevel" to="." method="_on_poolLevel_pressed"]
[connection signal="pressed" from="HBoxContainer/Menu/Buttons/customLevel" to="." method="_on_customLevel_pressed"]
[connection signal="toggled" from="HBoxContainer/Menu/CheckBox" to="." method="_on_CheckBox_toggled"]
[connection signal="timeout" from="HBoxContainer/Menu/Timer" to="." method="_on_timer_timeout"]
